{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Binary search is nothing but dividing the search into two parts and searching for the search in either of the part by comparing the giving number because it takes very little time to find the number. Moreover, when coming to calculating the rate of algorithm we will mainly consider two things they are \'93Time to solve\'94 and \'93Size of problem\'94, and Binary search is in order of O(log n) without any base order, and this is based on the successful result of the algorithm according to \uc0\u937 (1) because the element may be in the mid position itself. However,\
When coming to a worse case of search as if the element is in the first position or in the nth position even the Binary search algorithm takes more than two passes to find the number. But, when coming to the Modified Binary search algorithm here we are decreasing the time to solve the problem by checking whether the number is there in the list or not by using \'93if(a[low]>key || a[high]<key)\'94 here when the condition false we can say that the number is not in the list and if the condition is true then we will further search for first, mid and nth positions and here we are making the Binary Search much efficient by reducing the wrote cases.}